<?php

/**
 * @file
 * Contains va_gov_backend.module.
 */

use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Field\WidgetBase;
use Drupal\Core\Form\FormStateInterface;
use GuzzleHttp\Client;
use GuzzleHttp\Exception as GuzzleException;
use League\CommonMark\CommonMarkConverter;

/**
 * Implements hook_help().
 */
function va_gov_backend_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the va_gov_form_helper module.
    case 'help.page.va_gov_form_helper':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>Tools to improve backend user experience for VA.gov</p>';
      $output .= '<ul>';
      $output .= '<li>Hide Trigger Text field in Alert paragraph form unless Alert Type is Expanding</li>';
      $output .= '</ul>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function va_gov_backend_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // First make sure this isn't new content.
  $path = \Drupal::service('path.current')->getPath();
  $arg = explode('/', $path);
  if ($arg[2] !== 'empty' && $arg[2] !== 'add') {

    // We want to show time last built on nodes, promos and alerts.
    if (!empty($form['#entity_type']) && ($form['#entity_type'] === 'node'
    || $form['#entity_type'] === 'block_content')) {

      // Every value in this column is the same, so just get the last one.
      $query = \Drupal::database()->select('node__field_page_last_built', 'nf')
        ->fields('nf', ['field_page_last_built_value'])
        ->execute()->fetchField();

      // Convert it to unixtime.
      $time1 = strtotime($query);
      $time2 = strtotime('+1 day', $time1);
      // Here's our last published formatted date.
      $date1 = date('M d, Y', $time1);
      // 24 hours later.
      $date2 = date('M d, Y', $time2);

      // Append it to the top of the workflow fieldset.
      $form['moderation_state']['widget'][0]['#prefix'] = t('The published
    version of this content was last built on va.gov on <b>:date1</b>.<br />
    The next build will be triggered on <b>:date2</b>.',
      [':date1' => $date1, ':date2' => $date2]);
    }

  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function va_gov_backend_field_widget_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  // Hide Trigger Text in Alert paragraph form unless Alert Type is "Expanding".
  $field_definition = $context['items']->getFieldDefinition();
  /** @var \Drupal\field\Entity\FieldConfig $field_definition */
  $paragraph_entity_reference_field_name = $field_definition->getName();

  if ($paragraph_entity_reference_field_name == 'field_content_block') {
    $widget_state = WidgetBase::getWidgetState($element['#field_parents'], $paragraph_entity_reference_field_name, $form_state);

    $paragraph_instance = $widget_state['paragraphs'][$element['#delta']]['entity'];
    $paragraph_type = $paragraph_instance->bundle();

    if ($paragraph_type == 'alert') {
      $selector = sprintf(':input[name="%s[%d][subform][%s]"]', $paragraph_entity_reference_field_name, $element['#delta'], 'field_alert_type');

      $element['subform']['field_alert_trigger_text']['#states'] = [
        'visible' => [
          $selector => ['value' => 'expanding'],
        ],
      ];
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function va_gov_backend_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'va_gov_backend/alert_form';
}

/**
 * Implements hook_block_view_alter().
 *
 * Used for grabbing help markup from github.
 */
function va_gov_backend_block_view_alter(array &$build, BlockPluginInterface $block) {
  if ($block->getBaseId() === 'system_main_block') {
    $current_uri = \Drupal::request()->getRequestUri();
    if ($current_uri === '/training-guide') {
      $build['#pre_render'][] = '_va_gov_backend_block_prerender';
    }
  }
}

/**
 * Pre render for main content block.
 */
function _va_gov_backend_block_prerender(array $build) {
  $text = 'Help text is not available.';
  $client = new Client();
  try {
    $response = $client->get('https://raw.githubusercontent.com/department-of-veterans-affairs/drupal-helpdesk-training/master/manual.md?token=ACSwwy_DAv2U6KyfjfItr__fxDJiMGkJks5cvz90wA%3D%3D');

    if ($response->getStatusCode() === 200) {
      $data = $response->getBody()->getContents();
      $converter = new CommonMarkConverter();
      $text = $converter->convertToHtml($data);
    }

  }
  catch (GuzzleException $e) {
    watchdog_exception('help_text', $e->getMessage());
  }

  $build['content']['#markup'] = $text;

  return $build;
}
